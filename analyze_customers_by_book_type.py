#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Th√™m ph√¢n lo·∫°i s√°ch v√† ph√¢n t√≠ch kh√°ch h√†ng ti·ªÅm nƒÉng theo lo·∫°i s√°ch
"""

import pandas as pd
import numpy as np
import json
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict
import warnings
warnings.filterwarnings('ignore')

print('=' * 70)
print('PH√ÇN T√çCH KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG THEO LO·∫†I S√ÅCH')
print('=' * 70)

# ƒê·ªçc d·ªØ li·ªáu
df = pd.read_csv('user_actions_students_576.csv')
print(f'‚úÖ ƒê·ªçc d·ªØ li·ªáu: {len(df)} records, {df["user_id"].nunique()} users')

# ƒê·ªãnh nghƒ©a mapping t·ª´ product_id ƒë·∫øn lo·∫°i s√°ch
book_type_mapping = {
    1: "C√¥ng ngh·ªá gi√°o d·ª•c",
    2: "Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y", 
    3: "C√¥ng ngh·ªá th√¥ng tin",
    4: "Thi·∫øt k·∫ø web",
    5: "L·∫≠p tr√¨nh",
    6: "Nghi√™n c·ª©u khoa h·ªçc",
    7: "Gi√°o d·ª•c STEM",
    8: "Gi·∫£ng d·∫°y ti·∫øng Anh",
    9: "Thi·∫øt k·∫ø",
    10: "C∆° s·ªü d·ªØ li·ªáu",
    11: "Ph√°t tri·ªÉn ·ª©ng d·ª•ng",
    12: "C√¥ng ngh·ªá gi√°o d·ª•c"  # Th√™m m·ªôt lo·∫°i n·ªØa
}

# Th√™m c·ªôt book_type v√†o DataFrame
df['book_type'] = df['product_id'].map(book_type_mapping)

print(f'\nüìö C√ÅC LO·∫†I S√ÅCH TRONG H·ªÜ TH·ªêNG:')
for product_id, book_type in book_type_mapping.items():
    count = len(df[df['product_id'] == product_id])
    print(f'   Product {product_id}: {book_type} ({count} records)')

# T·∫°o features t·ª´ d·ªØ li·ªáu v·ªõi th√¥ng tin lo·∫°i s√°ch
user_behavior = df.groupby('user_id').agg({
    'event_type': lambda x: 'purchase' in x.values,
    'product_id': 'nunique',
    'price': ['sum', 'mean'],
    'age': 'first',
    'income_level': 'first',
    'education': 'first',
    'name': 'first',
    'email': 'first',
    'income': 'first',
    'book_type': lambda x: list(x.unique())
}).reset_index()

user_behavior['total_actions'] = df.groupby('user_id')['event_type'].count().values

# Flatten column names
user_behavior.columns = ['user_id', 'is_potential', 'unique_products', 'total_spending', 
                         'avg_spending', 'age', 'income_level', 'education', 'name', 
                         'email', 'income', 'book_types', 'total_actions']

# T·∫°o c·ªôt cho t·ª´ng lo·∫°i s√°ch (s·ªë l∆∞·ª£ng mua)
book_type_columns = {}
for book_type in set(book_type_mapping.values()):
    col_name = f'books_{book_type.lower().replace(" ", "_").replace("ƒë", "d")}'
    user_behavior[col_name] = 0
    book_type_columns[book_type] = col_name

# ƒê·∫øm s·ªë l∆∞·ª£ng s√°ch theo lo·∫°i cho m·ªói user
for idx, row in user_behavior.iterrows():
    user_id = row['user_id']
    user_books = df[df['user_id'] == user_id]
    
    for book_type, col_name in book_type_columns.items():
        count = len(user_books[user_books['book_type'] == book_type])
        user_behavior.loc[idx, col_name] = count

print(f'\n‚úÖ T·∫°o features cho {len(user_behavior)} users v·ªõi th√¥ng tin lo·∫°i s√°ch')

# Ph√¢n t√≠ch kh√°ch h√†ng ti·ªÅn nƒÉng theo lo·∫°i s√°ch
potential_customers = user_behavior[user_behavior['is_potential'] == True].copy()

print(f'\nüìä PH√ÇN T√çCH KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG THEO LO·∫†I S√ÅCH:')
print(f'   T·ªïng s·ªë kh√°ch h√†ng ti·ªÅm nƒÉng: {len(potential_customers)}')

# Th·ªëng k√™ theo lo·∫°i s√°ch
book_type_stats = {}
for book_type, col_name in book_type_columns.items():
    customers_with_books = len(potential_customers[potential_customers[col_name] > 0])
    total_books = potential_customers[col_name].sum()
    avg_books = potential_customers[col_name].mean()
    
    book_type_stats[book_type] = {
        'customers': int(customers_with_books),
        'percentage': float((customers_with_books / len(potential_customers)) * 100),
        'total_books': int(total_books),
        'avg_books_per_customer': float(avg_books)
    }

# S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng kh√°ch h√†ng
sorted_book_types = sorted(book_type_stats.items(), key=lambda x: x[1]['customers'], reverse=True)

print(f'\nüèÜ TOP LO·∫†I S√ÅCH ƒê∆Ø·ª¢C KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG Y√äU TH√çCH:')
for i, (book_type, stats) in enumerate(sorted_book_types[:8], 1):
    print(f'   {i}. {book_type}')
    print(f'      üë• Kh√°ch h√†ng: {stats["customers"]} ({stats["percentage"]:.1f}%)')
    print(f'      üìö T·ªïng s√°ch: {stats["total_books"]}')
    print(f'      üìä TB/kh√°ch h√†ng: {stats["avg_books_per_customer"]:.1f}')
    print()

# T·∫°o bi·ªÉu ƒë·ªì ph√¢n t√≠ch
fig, axes = plt.subplots(2, 2, figsize=(16, 12))
fig.suptitle('Ph√¢n T√≠ch Kh√°ch H√†ng Ti·ªÅm NƒÉng Theo Lo·∫°i S√°ch', fontsize=16, fontweight='bold')

# 1. Bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng kh√°ch h√†ng theo lo·∫°i s√°ch
book_types = [item[0] for item in sorted_book_types]
customer_counts = [item[1]['customers'] for item in sorted_book_types]

axes[0, 0].barh(range(len(book_types)), customer_counts, alpha=0.7, color='skyblue')
axes[0, 0].set_yticks(range(len(book_types)))
axes[0, 0].set_yticklabels([bt[:15] + '...' if len(bt) > 15 else bt for bt in book_types])
axes[0, 0].set_xlabel('S·ªë l∆∞·ª£ng kh√°ch h√†ng')
axes[0, 0].set_title('S·ªë Kh√°ch H√†ng Ti·ªÅm NƒÉng Theo Lo·∫°i S√°ch')
axes[0, 0].grid(True, alpha=0.3)

# 2. Bi·ªÉu ƒë·ªì ph·∫ßn trƒÉm kh√°ch h√†ng
percentages = [item[1]['percentage'] for item in sorted_book_types]
axes[0, 1].barh(range(len(book_types)), percentages, alpha=0.7, color='lightcoral')
axes[0, 1].set_yticks(range(len(book_types)))
axes[0, 1].set_yticklabels([bt[:15] + '...' if len(bt) > 15 else bt for bt in book_types])
axes[0, 1].set_xlabel('Ph·∫ßn trƒÉm (%)')
axes[0, 1].set_title('Ph·∫ßn TrƒÉm Kh√°ch H√†ng Ti·ªÅm NƒÉng')
axes[0, 1].grid(True, alpha=0.3)

# 3. Bi·ªÉu ƒë·ªì t·ªïng s·ªë s√°ch b√°n ƒë∆∞·ª£c
total_books = [item[1]['total_books'] for item in sorted_book_types]
axes[1, 0].barh(range(len(book_types)), total_books, alpha=0.7, color='lightgreen')
axes[1, 0].set_yticks(range(len(book_types)))
axes[1, 0].set_yticklabels([bt[:15] + '...' if len(bt) > 15 else bt for bt in book_types])
axes[1, 0].set_xlabel('T·ªïng s·ªë s√°ch')
axes[1, 0].set_title('T·ªïng S·ªë S√°ch B√°n ƒê∆∞·ª£c Theo Lo·∫°i')
axes[1, 0].grid(True, alpha=0.3)

# 4. Bi·ªÉu ƒë·ªì trung b√¨nh s√°ch/kh√°ch h√†ng
avg_books = [item[1]['avg_books_per_customer'] for item in sorted_book_types]
axes[1, 1].barh(range(len(book_types)), avg_books, alpha=0.7, color='gold')
axes[1, 1].set_yticks(range(len(book_types)))
axes[1, 1].set_yticklabels([bt[:15] + '...' if len(bt) > 15 else bt for bt in book_types])
axes[1, 1].set_xlabel('Trung b√¨nh s√°ch/kh√°ch h√†ng')
axes[1, 1].set_title('Trung B√¨nh S·ªë S√°ch M·ªói Kh√°ch H√†ng')
axes[1, 1].grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('book_type_analysis.png', dpi=300, bbox_inches='tight')
print('‚úÖ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì: book_type_analysis.png')

# T·∫°o d·ªØ li·ªáu JSON cho web app
potential_customers_data = []
for idx, row in potential_customers.head(100).iterrows():
    # T√≠nh t·ªïng s·ªë s√°ch theo lo·∫°i
    book_preferences = {}
    for book_type, col_name in book_type_columns.items():
        book_preferences[book_type] = int(row[col_name])
    
    # T√¨m lo·∫°i s√°ch y√™u th√≠ch nh·∫•t
    favorite_book_type = max(book_preferences.items(), key=lambda x: x[1])[0] if any(book_preferences.values()) else "Kh√¥ng x√°c ƒë·ªãnh"
    
    customer_data = {
        'id': row['user_id'],
        'name': row['name'],
        'email': row['email'],
        'age': int(row['age']),
        'total_actions': int(row['total_actions']),
        'unique_products': int(row['unique_products']),
        'total_spending': int(row['total_spending']),
        'probability': 0.8,  # Default probability
        'book_preferences': book_preferences,
        'favorite_book_type': favorite_book_type
    }
    potential_customers_data.append(customer_data)

# L∆∞u d·ªØ li·ªáu JSON
with open('potential_customers_by_book_type.json', 'w', encoding='utf-8') as f:
    json.dump(potential_customers_data, f, ensure_ascii=False, indent=2)

print(f'‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu JSON: potential_customers_by_book_type.json')

# T·∫°o b√°o c√°o chi ti·∫øt
report = {
    'summary': {
        'total_potential_customers': len(potential_customers),
        'total_book_types': len(book_type_mapping),
        'analysis_date': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
    },
    'book_type_statistics': book_type_stats,
    'top_customers_by_book_type': {}
}

# Top kh√°ch h√†ng theo t·ª´ng lo·∫°i s√°ch
for book_type, col_name in book_type_columns.items():
    top_customers = potential_customers.nlargest(5, col_name)
    report['top_customers_by_book_type'][book_type] = []
    
    for _, customer in top_customers.iterrows():
        if customer[col_name] > 0:  # Ch·ªâ l·∫•y kh√°ch h√†ng c√≥ mua lo·∫°i s√°ch n√†y
            report['top_customers_by_book_type'][book_type].append({
                'name': str(customer['name']),
                'email': str(customer['email']),
                'books_count': int(customer[col_name]),
                'total_spending': int(customer['total_spending'])
            })

# L∆∞u b√°o c√°o
with open('book_type_analysis_report.json', 'w', encoding='utf-8') as f:
    json.dump(report, f, ensure_ascii=False, indent=2)

print(f'‚úÖ ƒê√£ l∆∞u b√°o c√°o: book_type_analysis_report.json')

print(f'\nüéØ INSIGHTS CH√çNH:')
print(f'   1. Lo·∫°i s√°ch ph·ªï bi·∫øn nh·∫•t: {sorted_book_types[0][0]} ({sorted_book_types[0][1]["percentage"]:.1f}% kh√°ch h√†ng)')
print(f'   2. Lo·∫°i s√°ch √≠t ph·ªï bi·∫øn nh·∫•t: {sorted_book_types[-1][0]} ({sorted_book_types[-1][1]["percentage"]:.1f}% kh√°ch h√†ng)')
print(f'   3. Trung b√¨nh {np.mean([stats["avg_books_per_customer"] for stats in book_type_stats.values()]):.1f} s√°ch/kh√°ch h√†ng')

print(f'\n‚ú® HO√ÄN TH√ÄNH PH√ÇN T√çCH THEO LO·∫†I S√ÅCH!')

