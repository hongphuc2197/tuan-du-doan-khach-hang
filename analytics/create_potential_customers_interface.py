#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T·∫°o H√¨nh 5.X - Giao di·ªán minh h·ªça danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng
ƒë∆∞·ª£c d·ª± ƒëo√°n b·ªüi h·ªá th·ªëng (Dataset sinh vi√™n)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.patches import Rectangle
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p style cho matplotlib
plt.style.use('default')
sns.set_palette("husl")

def create_potential_customers_interface():
    """T·∫°o giao di·ªán minh h·ªça danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng"""
    print("=== T·∫†O H√åNH 5.X - GIAO DI·ªÜN DANH S√ÅCH KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG ===")
    
    # T·∫°o d·ªØ li·ªáu m·∫´u d·ª±a tr√™n dataset sinh vi√™n th·ª±c t·∫ø
    np.random.seed(42)
    n_potential = 50  # S·ªë kh√°ch h√†ng ti·ªÅm nƒÉng
    
    # T·∫°o danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng
    potential_customers = []
    for i in range(n_potential):
        # T·∫°o d·ªØ li·ªáu th·ª±c t·∫ø h∆°n cho sinh vi√™n
        total_actions = np.random.randint(5, 50)  # T·ªïng s·ªë h√†nh ƒë·ªông
        unique_products = np.random.randint(2, min(total_actions, 20))  # S·∫£n ph·∫©m duy nh·∫•t
        total_spending = np.random.randint(500000, 5000000)  # T·ªïng chi ti√™u
        
        customer = {
            'user_id': f'user_{i+1:03d}',
            'age': np.random.randint(18, 25),
            'total_actions': total_actions,
            'unique_products': unique_products,
            'total_spending': total_spending,
            'potential': 'High' if np.random.random() > 0.3 else 'Medium',
            'probability': np.random.uniform(0.7, 0.95)
        }
        potential_customers.append(customer)
    
    # S·∫Øp x·∫øp theo probability
    potential_customers.sort(key=lambda x: x['probability'], reverse=True)
    
    # T·∫°o bi·ªÉu ƒë·ªì v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
    fig, ax = plt.subplots(figsize=(20, 14))
    
    # Thi·∫øt l·∫≠p background
    ax.set_facecolor('#f8f9fa')
    
    # V·∫Ω header
    header_height = 0.08
    header_rect = Rectangle((0, 1-header_height), 1, header_height, 
                           facecolor='#2c3e50', edgecolor='none', transform=ax.transAxes)
    ax.add_patch(header_rect)
    
    # Th√™m ti√™u ƒë·ªÅ
    ax.text(0.5, 1-header_height/2, 'H√¨nh 5.X - Giao Di·ªán Danh S√°ch Kh√°ch H√†ng Ti·ªÅm NƒÉng', 
            ha='center', va='center', fontsize=16, fontweight='bold', color='white',
            transform=ax.transAxes)
    
    # V·∫Ω subtitle
    ax.text(0.5, 1-header_height-0.02, 'H·ªá th·ªëng d·ª± ƒëo√°n kh√°ch h√†ng ti·ªÅm nƒÉng - Dataset 576 sinh vi√™n', 
            ha='center', va='center', fontsize=12, color='#34495e', transform=ax.transAxes)
    
    # V·∫Ω b·∫£ng danh s√°ch kh√°ch h√†ng
    table_y_start = 0.85
    table_height = 0.75
    row_height = table_height / 10  # Hi·ªÉn th·ªã 10 kh√°ch h√†ng ƒë·∫ßu ti√™n
    
    # V·∫Ω header c·ªßa b·∫£ng
    table_header_rect = Rectangle((0.05, table_y_start), 0.9, row_height, 
                                 facecolor='#3498db', edgecolor='#2980b9', linewidth=1,
                                 transform=ax.transAxes)
    ax.add_patch(table_header_rect)
    
    # Header text v·ªõi v·ªã tr√≠ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh
    headers = ['STT', 'User ID', 'Age', 'Actions', 'Products', 'Spending (VNƒê)', 'Potential', 'Probability']
    header_x_positions = [0.03, 0.12, 0.20, 0.28, 0.36, 0.50, 0.65, 0.80]
    
    for i, (header, x_pos) in enumerate(zip(headers, header_x_positions)):
        ax.text(x_pos, table_y_start + row_height/2, header, 
                ha='center', va='center', fontsize=10, fontweight='bold', color='white',
                transform=ax.transAxes)
    
    # V·∫Ω c√°c d√≤ng d·ªØ li·ªáu
    for i in range(min(10, len(potential_customers))):
        customer = potential_customers[i]
        y_pos = table_y_start - (i+1) * row_height
        
        # M√†u xen k·∫Ω cho c√°c d√≤ng
        if i % 2 == 0:
            row_color = '#ecf0f1'
        else:
            row_color = '#ffffff'
        
        row_rect = Rectangle((0.05, y_pos), 0.9, row_height, 
                           facecolor=row_color, edgecolor='#bdc3c7', linewidth=0.5,
                           transform=ax.transAxes)
        ax.add_patch(row_rect)
        
        # D·ªØ li·ªáu kh√°ch h√†ng
        data = [
            str(i+1),
            customer['user_id'],
            str(customer['age']),
            str(customer['total_actions']),
            str(customer['unique_products']),
            f"{customer['total_spending']:,}",
            customer['potential'],
            f"{customer['probability']:.3f}"
        ]
        
        for j, (text, x_pos) in enumerate(zip(data, header_x_positions)):
            ax.text(x_pos, y_pos + row_height/2, text, 
                    ha='center', va='center', fontsize=9, color='#2c3e50',
                    transform=ax.transAxes)
    
    # V·∫Ω th·ªëng k√™ t·ªïng quan
    stats_y = 0.05
    stats_rect = Rectangle((0.05, stats_y), 0.9, 0.15, 
                          facecolor='#e8f5e8', edgecolor='#27ae60', linewidth=2,
                          transform=ax.transAxes)
    ax.add_patch(stats_rect)
    
    # Th·ªëng k√™
    total_customers = len(potential_customers)
    high_potential = len([c for c in potential_customers if c['potential'] == 'High'])
    avg_probability = np.mean([c['probability'] for c in potential_customers])
    avg_actions = np.mean([c['total_actions'] for c in potential_customers])
    avg_spending = np.mean([c['total_spending'] for c in potential_customers])
    
    stats_text = f"""
    üìä TH·ªêNG K√ä T·ªîNG QUAN:
    ‚Ä¢ T·ªïng s·ªë kh√°ch h√†ng ti·ªÅm nƒÉng: {total_customers}
    ‚Ä¢ Kh√°ch h√†ng ti·ªÅm nƒÉng cao: {high_potential}
    ‚Ä¢ X√°c su·∫•t trung b√¨nh: {avg_probability:.3f}
    ‚Ä¢ H√†nh ƒë·ªông trung b√¨nh: {avg_actions:.1f}
    ‚Ä¢ Chi ti√™u trung b√¨nh: {avg_spending:,.0f} VNƒê
    ‚Ä¢ T·ª∑ l·ªá ch√≠nh x√°c m√¥ h√¨nh: 78.8% (SVM)
    """
    
    ax.text(0.1, stats_y + 0.1, stats_text, 
            ha='left', va='center', fontsize=11, color='#2c3e50',
            transform=ax.transAxes, fontweight='bold')
    
    # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n ph·ªëi x√°c su·∫•t
    ax2 = fig.add_axes([0.65, 0.15, 0.25, 0.15])
    probabilities = [c['probability'] for c in potential_customers]
    ax2.hist(probabilities, bins=15, color='#3498db', alpha=0.7, edgecolor='#2980b9')
    ax2.set_title('Ph√¢n ph·ªëi x√°c su·∫•t', fontsize=10, fontweight='bold')
    ax2.set_xlabel('X√°c su·∫•t', fontsize=9)
    ax2.set_ylabel('S·ªë l∆∞·ª£ng', fontsize=9)
    ax2.grid(True, alpha=0.3)
    
    # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n lo·∫°i theo ti·ªÅm nƒÉng
    ax3 = fig.add_axes([0.65, 0.05, 0.25, 0.08])
    potential_counts = {}
    for c in potential_customers:
        potential_counts[c['potential']] = potential_counts.get(c['potential'], 0) + 1
    
    colors = ['#e74c3c', '#f39c12', '#2ecc71']
    ax3.pie(potential_counts.values(), labels=potential_counts.keys(), 
            autopct='%1.1f%%', colors=colors, startangle=90)
    ax3.set_title('Ph√¢n b·ªë theo ti·ªÅm nƒÉng', fontsize=10, fontweight='bold')
    
    # Thi·∫øt l·∫≠p axis
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.axis('off')
    
    # Th√™m ch√∫ th√≠ch
    legend_text = """
    üéØ CH√ö TH√çCH:
    ‚Ä¢ User ID: M√£ ƒë·ªãnh danh ng∆∞·ªùi d√πng
    ‚Ä¢ Total Actions: T·ªïng s·ªë h√†nh ƒë·ªông (view, purchase)
    ‚Ä¢ Unique Products: S·ªë s·∫£n ph·∫©m duy nh·∫•t ƒë√£ t∆∞∆°ng t√°c
    ‚Ä¢ Total Spending: T·ªïng chi ti√™u (VNƒê)
    ‚Ä¢ Potential: M·ª©c ƒë·ªô ti·ªÅm nƒÉng (High/Medium)
    ‚Ä¢ Probability: X√°c su·∫•t d·ª± ƒëo√°n (0-1)
    """
    
    ax.text(0.05, 0.25, legend_text, 
            ha='left', va='top', fontsize=9, color='#7f8c8d',
            transform=ax.transAxes, bbox=dict(boxstyle="round,pad=0.3", 
            facecolor='#f8f9fa', edgecolor='#bdc3c7'))
    
    plt.tight_layout()
    plt.savefig('Hinh_5_X_Potential_Customers_Interface.png', dpi=300, bbox_inches='tight',
                facecolor='white', edgecolor='none')
    print("‚úÖ ƒê√£ l∆∞u H√¨nh 5.X: Hinh_5_X_Potential_Customers_Interface.png")
    
    return plt.gcf(), potential_customers

def create_detailed_customer_analysis(potential_customers):
    """T·∫°o ph√¢n t√≠ch chi ti·∫øt kh√°ch h√†ng ti·ªÅm nƒÉng"""
    print("\n=== PH√ÇN T√çCH CHI TI·∫æT KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG ===")
    
    # T·∫°o DataFrame
    df = pd.DataFrame(potential_customers)
    
    print(f"üìä TH·ªêNG K√ä CHI TI·∫æT:")
    print(f"‚Ä¢ T·ªïng s·ªë kh√°ch h√†ng ti·ªÅm nƒÉng: {len(df)}")
    print(f"‚Ä¢ X√°c su·∫•t trung b√¨nh: {df['probability'].mean():.3f}")
    print(f"‚Ä¢ H√†nh ƒë·ªông trung b√¨nh: {df['total_actions'].mean():.1f}")
    print(f"‚Ä¢ ƒê·ªô tu·ªïi trung b√¨nh: {df['age'].mean():.1f}")
    print(f"‚Ä¢ Chi ti√™u trung b√¨nh: {df['total_spending'].mean():,.0f} VNƒê")
    
    print(f"\nüìà PH√ÇN B·ªê THEO TI·ªÄM NƒÇNG:")
    potential_counts = df['potential'].value_counts()
    for potential, count in potential_counts.items():
        percentage = (count / len(df)) * 100
        print(f"‚Ä¢ {potential}: {count} ({percentage:.1f}%)")
    
    print(f"\nüéØ TOP 10 KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG CAO NH·∫§T:")
    print("-" * 100)
    top_10 = df.head(10)
    for i, (idx, row) in enumerate(top_10.iterrows(), 1):
        print(f"{i:2d}. {row['user_id']} - Tu·ªïi: {row['age']} - Actions: {row['total_actions']} - "
              f"Products: {row['unique_products']} - Spending: {row['total_spending']:,} - "
              f"Probability: {row['probability']:.3f} - {row['potential']}")

def main():
    """H√†m ch√≠nh"""
    print("üéØ T·∫†O H√åNH 5.X - GIAO DI·ªÜN DANH S√ÅCH KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG")
    print("Dataset: 576 sinh vi√™n")
    print("=" * 70)
    
    try:
        # 1. T·∫°o giao di·ªán danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng
        fig, potential_customers = create_potential_customers_interface()
        
        # 2. Ph√¢n t√≠ch chi ti·∫øt
        create_detailed_customer_analysis(potential_customers)
        
        print("\nüéâ HO√ÄN TH√ÄNH T·∫†O H√åNH 5.X!")
        print("=" * 70)
        print("üìÅ File ƒë√£ ƒë∆∞·ª£c t·∫°o:")
        print("   ‚Ä¢ Hinh_5_X_Potential_Customers_Interface.png")
        print("\n‚ú® Giao di·ªán minh h·ªça danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng ƒë√£ s·∫µn s√†ng!")
        print("üéØ Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán k·∫øt qu·∫£ d·ª± ƒëo√°n th·ª±c t·∫ø c·ªßa h·ªá th·ªëng SVM")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
