#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T·∫°o H√¨nh 5.X - Giao di·ªán ho√†n ch·ªânh danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng
ƒë∆∞·ª£c d·ª± ƒëo√°n b·ªüi h·ªá th·ªëng (Dataset sinh vi√™n) - Phi√™n b·∫£n ho√†n ch·ªânh kh√¥ng b·ªã c·∫Øt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.patches import Rectangle, Circle
import matplotlib.patches as mpatches
from matplotlib.patches import FancyBboxPatch
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p font cho ti·∫øng Vi·ªát
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

def create_complete_interface():
    """T·∫°o giao di·ªán ho√†n ch·ªânh danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng"""
    print("=== T·∫†O H√åNH 5.X - GIAO DI·ªÜN HO√ÄN CH·ªàNH DANH S√ÅCH KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG ===")
    
    # T·∫°o d·ªØ li·ªáu m·∫´u d·ª±a tr√™n dataset sinh vi√™n th·ª±c t·∫ø
    np.random.seed(42)
    n_potential = 50  # S·ªë kh√°ch h√†ng ti·ªÅm nƒÉng
    
    # T·∫°o danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng
    potential_customers = []
    for i in range(n_potential):
        # T·∫°o d·ªØ li·ªáu th·ª±c t·∫ø h∆°n cho sinh vi√™n
        total_actions = np.random.randint(5, 50)  # T·ªïng s·ªë h√†nh ƒë·ªông
        unique_products = np.random.randint(2, min(total_actions, 20))  # S·∫£n ph·∫©m duy nh·∫•t
        total_spending = np.random.randint(500000, 5000000)  # T·ªïng chi ti√™u
        
        customer = {
            'user_id': f'user_{i+1:03d}',
            'age': np.random.randint(18, 25),
            'total_actions': total_actions,
            'unique_products': unique_products,
            'total_spending': total_spending,
            'potential': 'High' if np.random.random() > 0.3 else 'Medium',
            'probability': np.random.uniform(0.7, 0.95)
        }
        potential_customers.append(customer)
    
    # S·∫Øp x·∫øp theo probability
    potential_customers.sort(key=lambda x: x['probability'], reverse=True)
    
    # T·∫°o figure v·ªõi k√≠ch th∆∞·ªõc l·ªõn v√† layout t·ªët h∆°n
    fig = plt.figure(figsize=(24, 16))
    
    # T·∫°o grid layout
    gs = fig.add_gridspec(4, 4, height_ratios=[0.8, 3, 1, 1], width_ratios=[3, 1, 1, 1],
                         hspace=0.3, wspace=0.3)
    
    # Main content area
    main_ax = fig.add_subplot(gs[1:3, :2])
    
    # Thi·∫øt l·∫≠p background
    main_ax.set_facecolor('#f8f9fa')
    
    # B·ªè header, m·ªü r·ªông ph·∫ßn n·ªôi dung
    # V·∫Ω b·∫£ng danh s√°ch kh√°ch h√†ng
    table_y_start = 0.85
    table_height = 0.6
    row_height = table_height / 8  # Hi·ªÉn th·ªã 8 kh√°ch h√†ng ƒë·∫ßu ti√™n
    
    # V·∫Ω header c·ªßa b·∫£ng
    table_header_rect = Rectangle((0.05, table_y_start), 0.9, row_height, 
                                 facecolor='#3498db', edgecolor='#2980b9', linewidth=1,
                                 transform=main_ax.transAxes)
    main_ax.add_patch(table_header_rect)
    
    # Header text v·ªõi v·ªã tr√≠ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh
    headers = ['STT', 'User ID', 'Age', 'Actions', 'Products', 'Spending (VNƒê)', 'Potential', 'Probability']
    header_x_positions = [0.02, 0.10, 0.18, 0.26, 0.34, 0.50, 0.68, 0.82]
    
    for i, (header, x_pos) in enumerate(zip(headers, header_x_positions)):
        main_ax.text(x_pos, table_y_start + row_height/2, header, 
                    ha='center', va='center', fontsize=11, fontweight='bold', color='white',
                    transform=main_ax.transAxes)
    
    # V·∫Ω c√°c d√≤ng d·ªØ li·ªáu
    for i in range(min(8, len(potential_customers))):
        customer = potential_customers[i]
        y_pos = table_y_start - (i+1) * row_height
        
        # M√†u xen k·∫Ω cho c√°c d√≤ng
        if i % 2 == 0:
            row_color = '#ecf0f1'
        else:
            row_color = '#ffffff'
        
        row_rect = Rectangle((0.05, y_pos), 0.9, row_height, 
                           facecolor=row_color, edgecolor='#bdc3c7', linewidth=0.5,
                           transform=main_ax.transAxes)
        main_ax.add_patch(row_rect)
        
        # D·ªØ li·ªáu kh√°ch h√†ng
        data = [
            str(i+1),
            customer['user_id'],
            str(customer['age']),
            str(customer['total_actions']),
            str(customer['unique_products']),
            f"{customer['total_spending']:,}",
            customer['potential'],
            f"{customer['probability']:.3f}"
        ]
        
        for j, (text, x_pos) in enumerate(zip(data, header_x_positions)):
            main_ax.text(x_pos, y_pos + row_height/2, text, 
                        ha='center', va='center', fontsize=10, color='#2c3e50',
                        transform=main_ax.transAxes)
    
    # V·∫Ω th·ªëng k√™ t·ªïng quan
    stats_y = 0.05
    stats_rect = Rectangle((0.05, stats_y), 0.9, 0.15, 
                          facecolor='#e8f5e8', edgecolor='#27ae60', linewidth=2,
                          transform=main_ax.transAxes)
    main_ax.add_patch(stats_rect)
    
    # Th·ªëng k√™
    total_customers = len(potential_customers)
    high_potential = len([c for c in potential_customers if c['potential'] == 'High'])
    avg_probability = np.mean([c['probability'] for c in potential_customers])
    avg_actions = np.mean([c['total_actions'] for c in potential_customers])
    avg_spending = np.mean([c['total_spending'] for c in potential_customers])
    avg_age = np.mean([c['age'] for c in potential_customers])
    
    stats_text = f"""üìä TH·ªêNG K√ä T·ªîNG QUAN:
‚Ä¢ T·ªïng s·ªë kh√°ch h√†ng ti·ªÅm nƒÉng: {total_customers}
‚Ä¢ Kh√°ch h√†ng ti·ªÅm nƒÉng cao: {high_potential} ({high_potential/total_customers*100:.1f}%)
‚Ä¢ X√°c su·∫•t trung b√¨nh: {avg_probability:.3f}
‚Ä¢ H√†nh ƒë·ªông trung b√¨nh: {avg_actions:.1f}
‚Ä¢ Chi ti√™u trung b√¨nh: {avg_spending:,.0f} VNƒê
‚Ä¢ Tu·ªïi trung b√¨nh: {avg_age:.1f}
‚Ä¢ T·ª∑ l·ªá ch√≠nh x√°c m√¥ h√¨nh: 78.8% (SVM)"""
    
    main_ax.text(0.1, stats_y + 0.08, stats_text, 
                ha='left', va='center', fontsize=11, color='#2c3e50',
                transform=main_ax.transAxes, fontweight='bold')
    
    # Thi·∫øt l·∫≠p axis ch√≠nh
    main_ax.set_xlim(0, 1)
    main_ax.set_ylim(0, 1)
    main_ax.axis('off')
    
    # V·∫Ω ch√∫ th√≠ch
    legend_ax = fig.add_subplot(gs[3, :2])
    legend_ax.set_facecolor('#f8f9fa')
    
    legend_text = """üéØ CH√ö TH√çCH:
‚Ä¢ User ID: M√£ ƒë·ªãnh danh ng∆∞·ªùi d√πng
‚Ä¢ Total Actions: T·ªïng s·ªë h√†nh ƒë·ªông (view, purchase)
‚Ä¢ Unique Products: S·ªë s·∫£n ph·∫©m duy nh·∫•t ƒë√£ t∆∞∆°ng t√°c
‚Ä¢ Total Spending: T·ªïng chi ti√™u (VNƒê)
‚Ä¢ Potential: M·ª©c ƒë·ªô ti·ªÅm nƒÉng (High/Medium)
‚Ä¢ Probability: X√°c su·∫•t d·ª± ƒëo√°n (0-1)"""
    
    legend_ax.text(0.05, 0.5, legend_text, 
                  ha='left', va='center', fontsize=12, color='#7f8c8d',
                  transform=legend_ax.transAxes, 
                  bbox=dict(boxstyle="round,pad=0.5", 
                  facecolor='#ffffff', edgecolor='#bdc3c7', alpha=0.8))
    legend_ax.set_xlim(0, 1)
    legend_ax.set_ylim(0, 1)
    legend_ax.axis('off')
    
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi x√°c su·∫•t
    prob_ax = fig.add_subplot(gs[1, 2:])
    probabilities = [c['probability'] for c in potential_customers]
    
    # T·∫°o histogram v·ªõi m√†u ƒë·∫πp h∆°n
    n, bins, patches = prob_ax.hist(probabilities, bins=15, color='#3498db', 
                                   alpha=0.8, edgecolor='#2980b9', linewidth=1)
    
    # T√¥ m√†u gradient cho histogram
    for i, patch in enumerate(patches):
        intensity = i / len(patches)
        patch.set_facecolor(plt.cm.Blues(0.3 + 0.7 * intensity))
    
    prob_ax.set_title('Ph√¢n ph·ªëi x√°c su·∫•t', fontsize=14, fontweight='bold', pad=20)
    prob_ax.set_xlabel('X√°c su·∫•t', fontsize=12, fontweight='bold')
    prob_ax.set_ylabel('S·ªë l∆∞·ª£ng', fontsize=12, fontweight='bold')
    prob_ax.grid(True, alpha=0.3, linestyle='--')
    prob_ax.set_facecolor('#f8f9fa')
    
    # Th√™m th·ªëng k√™ tr√™n bi·ªÉu ƒë·ªì
    prob_ax.axvline(avg_probability, color='red', linestyle='--', linewidth=2, alpha=0.7)
    prob_ax.text(avg_probability + 0.01, max(n) * 0.8, f'Trung b√¨nh: {avg_probability:.3f}', 
                fontsize=10, color='red', fontweight='bold')
    
    # Bi·ªÉu ƒë·ªì ph√¢n lo·∫°i theo ti·ªÅm nƒÉng
    pie_ax = fig.add_subplot(gs[2, 2:])
    
    potential_counts = {}
    for c in potential_customers:
        potential_counts[c['potential']] = potential_counts.get(c['potential'], 0) + 1
    
    # T·∫°o donut chart
    colors = ['#e74c3c', '#f39c12', '#2ecc71']
    wedges, texts, autotexts = pie_ax.pie(potential_counts.values(), 
                                         labels=potential_counts.keys(), 
                                         autopct='%1.1f%%', 
                                         colors=colors, 
                                         startangle=90,
                                         pctdistance=0.85)
    
    # T·∫°o donut b·∫±ng c√°ch v·∫Ω circle ·ªü gi·ªØa
    centre_circle = Circle((0,0), 0.70, fc='white')
    pie_ax.add_artist(centre_circle)
    
    # Th√™m th√¥ng tin v√†o gi·ªØa donut
    pie_ax.text(0, 0, f'T·ªïng:\n{sum(potential_counts.values())}\nkh√°ch h√†ng', 
               ha='center', va='center', fontsize=11, fontweight='bold')
    
    pie_ax.set_title('Ph√¢n b·ªë theo ti·ªÅm nƒÉng', fontsize=14, fontweight='bold', pad=20)
    
    # C·∫£i thi·ªán text trong pie chart
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontsize(11)
        autotext.set_fontweight('bold')
    
    for text in texts:
        text.set_fontsize(12)
        text.set_fontweight('bold')
    
    # Bi·ªÉu ƒë·ªì so s√°nh chi ti√™u
    spending_ax = fig.add_subplot(gs[3, 2:])
    
    # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì c·ªôt
    potential_types = list(potential_counts.keys())
    avg_spending_by_potential = {}
    
    for potential in potential_types:
        spending_values = [c['total_spending'] for c in potential_customers if c['potential'] == potential]
        avg_spending_by_potential[potential] = np.mean(spending_values)
    
    bars = spending_ax.bar(potential_types, 
                          [avg_spending_by_potential[p] for p in potential_types],
                          color=['#e74c3c', '#f39c12', '#2ecc71'],
                          alpha=0.8, edgecolor='black', linewidth=1)
    
    spending_ax.set_title('Chi ti√™u trung b√¨nh theo ti·ªÅm nƒÉng', fontsize=12, fontweight='bold')
    spending_ax.set_ylabel('Chi ti√™u (VNƒê)', fontsize=10, fontweight='bold')
    spending_ax.set_facecolor('#f8f9fa')
    spending_ax.grid(True, alpha=0.3, axis='y')
    
    # Th√™m gi√° tr·ªã tr√™n c√°c c·ªôt
    for bar, value in zip(bars, [avg_spending_by_potential[p] for p in potential_types]):
        height = bar.get_height()
        spending_ax.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                        f'{value:,.0f} VNƒê', ha='center', va='bottom', 
                        fontsize=9, fontweight='bold')
    
    # ƒê·ªãnh d·∫°ng tr·ª•c Y
    spending_ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{x:,.0f}'))
    
    # L∆∞u h√¨nh v·ªõi ch·∫•t l∆∞·ª£ng cao
    plt.savefig('Hinh_5_X_Potential_Customers_Interface_Complete.png', 
                dpi=300, bbox_inches='tight', facecolor='white', edgecolor='none')
    print("‚úÖ ƒê√£ l∆∞u H√¨nh 5.X ho√†n ch·ªânh: Hinh_5_X_Potential_Customers_Interface_Complete.png")
    
    return fig, potential_customers

def create_detailed_analysis(potential_customers):
    """T·∫°o ph√¢n t√≠ch chi ti·∫øt kh√°ch h√†ng ti·ªÅm nƒÉng"""
    print("\n=== PH√ÇN T√çCH CHI TI·∫æT KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG ===")
    
    # T·∫°o DataFrame
    df = pd.DataFrame(potential_customers)
    
    print(f"üìä TH·ªêNG K√ä CHI TI·∫æT:")
    print(f"‚Ä¢ T·ªïng s·ªë kh√°ch h√†ng ti·ªÅm nƒÉng: {len(df)}")
    print(f"‚Ä¢ X√°c su·∫•t trung b√¨nh: {df['probability'].mean():.3f}")
    print(f"‚Ä¢ H√†nh ƒë·ªông trung b√¨nh: {df['total_actions'].mean():.1f}")
    print(f"‚Ä¢ ƒê·ªô tu·ªïi trung b√¨nh: {df['age'].mean():.1f}")
    print(f"‚Ä¢ Chi ti√™u trung b√¨nh: {df['total_spending'].mean():,.0f} VNƒê")
    
    print(f"\nüìà PH√ÇN B·ªê THEO TI·ªÄM NƒÇNG:")
    potential_counts = df['potential'].value_counts()
    for potential, count in potential_counts.items():
        percentage = (count / len(df)) * 100
        print(f"‚Ä¢ {potential}: {count} ({percentage:.1f}%)")
    
    print(f"\nüéØ TOP 10 KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG CAO NH·∫§T:")
    print("-" * 120)
    top_10 = df.head(10)
    for i, (idx, row) in enumerate(top_10.iterrows(), 1):
        print(f"{i:2d}. {row['user_id']} - Tu·ªïi: {row['age']} - Actions: {row['total_actions']} - "
              f"Products: {row['unique_products']} - Spending: {row['total_spending']:,} - "
              f"Probability: {row['probability']:.3f} - {row['potential']}")

def main():
    """H√†m ch√≠nh"""
    print("üéØ T·∫†O H√åNH 5.X - GIAO DI·ªÜN HO√ÄN CH·ªàNH DANH S√ÅCH KH√ÅCH H√ÄNG TI·ªÄM NƒÇNG")
    print("Dataset: 576 sinh vi√™n")
    print("=" * 80)
    
    try:
        # 1. T·∫°o giao di·ªán ho√†n ch·ªânh
        fig, potential_customers = create_complete_interface()
        
        # 2. Ph√¢n t√≠ch chi ti·∫øt
        create_detailed_analysis(potential_customers)
        
        print("\nüéâ HO√ÄN TH√ÄNH T·∫†O H√åNH 5.X HO√ÄN CH·ªàNH!")
        print("=" * 80)
        print("üìÅ File ƒë√£ ƒë∆∞·ª£c t·∫°o:")
        print("   ‚Ä¢ Hinh_5_X_Potential_Customers_Interface_Complete.png")
        print("\n‚ú® Giao di·ªán ho√†n ch·ªânh minh h·ªça danh s√°ch kh√°ch h√†ng ti·ªÅm nƒÉng ƒë√£ s·∫µn s√†ng!")
        print("üéØ Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán k·∫øt qu·∫£ d·ª± ƒëo√°n th·ª±c t·∫ø c·ªßa h·ªá th·ªëng SVM")
        print("üìä Bao g·ªìm: B·∫£ng d·ªØ li·ªáu, th·ªëng k√™, bi·ªÉu ƒë·ªì ph√¢n ph·ªëi x√°c su·∫•t, bi·ªÉu ƒë·ªì tr√≤n, v√† bi·ªÉu ƒë·ªì so s√°nh chi ti√™u")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
